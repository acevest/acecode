// Code generated by protoc-gen-go. DO NOT EDIT.
// source: sample.proto

/*
Package sample is a generated protocol buffer package.

It is generated from these files:
	sample.proto

It has these top-level messages:
	SampleData
*/
package sample

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type SampleType int32

const (
	SampleType_SAMPLE_TYPE_RAW         SampleType = 1
	SampleType_SAMPLE_TYPE_LIGHT       SampleType = 2
	SampleType_SAMPLE_TYPE_TEMPERATURE SampleType = 3
	SampleType_SAMPLE_TYPE_HUMIDITY    SampleType = 4
	SampleType_SAMPLE_TYPE_TEST        SampleType = 5
)

var SampleType_name = map[int32]string{
	1: "SAMPLE_TYPE_RAW",
	2: "SAMPLE_TYPE_LIGHT",
	3: "SAMPLE_TYPE_TEMPERATURE",
	4: "SAMPLE_TYPE_HUMIDITY",
	5: "SAMPLE_TYPE_TEST",
}
var SampleType_value = map[string]int32{
	"SAMPLE_TYPE_RAW":         1,
	"SAMPLE_TYPE_LIGHT":       2,
	"SAMPLE_TYPE_TEMPERATURE": 3,
	"SAMPLE_TYPE_HUMIDITY":    4,
	"SAMPLE_TYPE_TEST":        5,
}

func (x SampleType) Enum() *SampleType {
	p := new(SampleType)
	*p = x
	return p
}
func (x SampleType) String() string {
	return proto.EnumName(SampleType_name, int32(x))
}
func (x *SampleType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SampleType_value, data, "SampleType")
	if err != nil {
		return err
	}
	*x = SampleType(value)
	return nil
}
func (SampleType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type SampleData struct {
	Title            *string     `protobuf:"bytes,1,opt,name=title" json:"title,omitempty"`
	Type             *SampleType `protobuf:"varint,2,req,name=type,enum=sample.SampleType" json:"type,omitempty"`
	Data             []string    `protobuf:"bytes,3,rep,name=data" json:"data,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *SampleData) Reset()                    { *m = SampleData{} }
func (m *SampleData) String() string            { return proto.CompactTextString(m) }
func (*SampleData) ProtoMessage()               {}
func (*SampleData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *SampleData) GetTitle() string {
	if m != nil && m.Title != nil {
		return *m.Title
	}
	return ""
}

func (m *SampleData) GetType() SampleType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return SampleType_SAMPLE_TYPE_RAW
}

func (m *SampleData) GetData() []string {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*SampleData)(nil), "sample.SampleData")
	proto.RegisterEnum("sample.SampleType", SampleType_name, SampleType_value)
}

func init() { proto.RegisterFile("sample.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 201 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x29, 0x4e, 0xcc, 0x2d,
	0xc8, 0x49, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x83, 0xf0, 0x94, 0xe2, 0xb8, 0xb8,
	0x82, 0xc1, 0x2c, 0x97, 0xc4, 0x92, 0x44, 0x21, 0x11, 0x2e, 0xd6, 0x92, 0xcc, 0x92, 0x9c, 0x54,
	0x09, 0x46, 0x05, 0x46, 0x0d, 0xce, 0x20, 0x08, 0x47, 0x48, 0x8d, 0x8b, 0xa5, 0xa4, 0xb2, 0x20,
	0x55, 0x82, 0x49, 0x81, 0x49, 0x83, 0xcf, 0x48, 0x48, 0x0f, 0x6a, 0x10, 0x44, 0x5f, 0x48, 0x65,
	0x41, 0x6a, 0x10, 0x58, 0x5e, 0x48, 0x88, 0x8b, 0x25, 0x25, 0xb1, 0x24, 0x51, 0x82, 0x59, 0x81,
	0x59, 0x83, 0x33, 0x08, 0xcc, 0xd6, 0x6a, 0x65, 0x84, 0x59, 0x00, 0x52, 0x28, 0x24, 0xcc, 0xc5,
	0x1f, 0xec, 0xe8, 0x1b, 0xe0, 0xe3, 0x1a, 0x1f, 0x12, 0x19, 0xe0, 0x1a, 0x1f, 0xe4, 0x18, 0x2e,
	0xc0, 0x28, 0x24, 0xca, 0x25, 0x88, 0x2c, 0xe8, 0xe3, 0xe9, 0xee, 0x11, 0x22, 0xc0, 0x24, 0x24,
	0xcd, 0x25, 0x8e, 0x2c, 0x1c, 0xe2, 0xea, 0x1b, 0xe0, 0x1a, 0xe4, 0x18, 0x12, 0x1a, 0xe4, 0x2a,
	0xc0, 0x2c, 0x24, 0xc1, 0x25, 0x82, 0x2c, 0xe9, 0x11, 0xea, 0xeb, 0xe9, 0xe2, 0x19, 0x12, 0x29,
	0xc0, 0x22, 0x24, 0xc2, 0x25, 0x80, 0xaa, 0x2d, 0x38, 0x44, 0x80, 0x15, 0x10, 0x00, 0x00, 0xff,
	0xff, 0x55, 0xab, 0x27, 0x80, 0xfe, 0x00, 0x00, 0x00,
}
